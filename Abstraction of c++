**Abstraction refers to the act of representing essential features without
  including the background details and explanation
  
** It hides the background / unnecessary details/ unwanted data


**Abstraction using Access Specifiers
Access specifiers are the main pillar of implementing abstraction in C++.

Members declared as public in a class can be accessed from anywhere in the program.
Members declared as private in a class, can be accessed only from within the class. 
They are not allowed to be accessed from any part of the code outside the class.
  
We can easily implement abstraction using the above two features provided by access specifiers. 
Say, the members that define the internal implementation can be marked as private in a class. 
And the important information needed to be given to the outside world can be marked as public. 
These public members can access the private members as they are inside the class.

**Types of Abstraction:
Data abstraction – This type only shows the required information about the data and ignores unnecessary details.
Control Abstraction – This type only shows the required information about the implementation and ignores unnecessary details.



#include<iostream>
using namespace std;


class Smartphone{
public:
    virtual void TakeASelfie() = 0;
    virtual void MakeaCall() = 0;




};

class Android : public Smartphone{
public:
    void TakeASelfie(){
        cout<<"Android selfie\n";
    }

    void MakeaCall(){
      cout<<"Android calling\n";

    }



};

class Iphone : public Smartphone{
public:
    void TakeASelfie(){
        cout<<"Iphone selfie\n";
    }

      void MakeaCall(){
      cout<<"Iphone calling\n";

    }


};

int main()
{
     Smartphone* s1 = new Iphone;
     s1->TakeASelfie();
     s1->MakeaCall();
     //Smartphone* s2 = new Iphone;
     //s2->TakeASelfie();


}




// C++ Program to Demonstrate the
// working of Abstraction
#include <iostream>
using namespace std;

class implementAbstraction {
private:
    int a, b;

public:
    // method to set values of
    // private members
    void set(int x, int y)
    {
        a = x;
        b = y;
    }

    void display()
    {
        cout << "a = " << a << endl;
        cout << "b = " << b << endl;
    }
};

int main()
{
    implementAbstraction obj;
    obj.set(10, 20);
    obj.display();
    return 0;
}

You can see in the above program we are not allowed to access the variables a and b directly, however, one can call the function set() to set the values in a and b and the function display() to display the values of a and b. 


//Advantages of Data Abstraction
1. Helps the user to avoid writing the low-level code
2. Avoids code duplication and increases reusability.
3. Can change the internal implementation of the class independently without affecting the user.
4. Helps to increase the security of an application or program as only important details are provided to the user.
5. It reduces the complexity as well as the redundancy of the code, therefore increasing the readability.
6. New features or changes can be added to the system with minimal impact on existing code.





